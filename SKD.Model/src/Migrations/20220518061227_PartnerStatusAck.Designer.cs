// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SKD.Model;

#nullable disable

namespace SKD.Model.src.Migrations
{
    [DbContext(typeof(SkdContext))]
    [Migration("20220518061227_PartnerStatusAck")]
    partial class PartnerStatusAck
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("SKD.Model.AppSetting", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RemovedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("app_setting", (string)null);
                });

            modelBuilder.Entity("SKD.Model.Bom", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("LotPartQuantitiesMatchShipment")
                        .HasColumnType("bit");

                    b.Property<Guid>("PlantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("RemovedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Sequence")
                        .HasMaxLength(4)
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PlantId", "Sequence")
                        .IsUnique();

                    b.ToTable("bom", (string)null);
                });

            modelBuilder.Entity("SKD.Model.Component", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("ComponentSerialRule")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("DcwsRequired")
                        .HasColumnType("bit");

                    b.Property<string>("IconURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("RemovedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("component", (string)null);
                });

            modelBuilder.Entity("SKD.Model.ComponentSerial", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("KitComponentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Original_Serial1")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Original_Serial2")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("RemovedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Serial1")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Serial2")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("VerifiedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("KitComponentId");

                    b.HasIndex("Serial2");

                    b.HasIndex("Serial1", "Serial2");

                    b.ToTable("component_serial", (string)null);
                });

            modelBuilder.Entity("SKD.Model.DcwsResponse", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ComponentSerialId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("DcwsSuccessfulSave")
                        .HasColumnType("bit");

                    b.Property<string>("ErrorMessage")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("ProcessExcptionCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("RemovedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ComponentSerialId");

                    b.ToTable("dcws_response", (string)null);
                });

            modelBuilder.Entity("SKD.Model.Dealer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("RemovedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("dealer", (string)null);
                });

            modelBuilder.Entity("SKD.Model.HandlingUnit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasMaxLength(7)
                        .HasColumnType("nvarchar(7)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("RemovedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ShipmentInvoiceId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasFilter("[Code] IS NOT NULL");

                    b.HasIndex("ShipmentInvoiceId");

                    b.ToTable("handling_unit", (string)null);
                });

            modelBuilder.Entity("SKD.Model.HandlingUnitReceived", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("HandlingUnitId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("RemovedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("HandlingUnitId");

                    b.ToTable("handling_unit_received", (string)null);
                });

            modelBuilder.Entity("SKD.Model.Kit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DealerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("KitNo")
                        .IsRequired()
                        .HasMaxLength(17)
                        .HasColumnType("nvarchar(17)");

                    b.Property<Guid>("LotId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("RemovedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("VIN")
                        .IsRequired()
                        .HasMaxLength(17)
                        .HasColumnType("nvarchar(17)");

                    b.HasKey("Id");

                    b.HasIndex("DealerId");

                    b.HasIndex("KitNo")
                        .IsUnique();

                    b.HasIndex("LotId");

                    b.HasIndex("VIN");

                    b.ToTable("kit", (string)null);
                });

            modelBuilder.Entity("SKD.Model.KitComponent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ComponentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("KitId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductionStationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("RemovedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("VerifiedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ComponentId");

                    b.HasIndex("ProductionStationId");

                    b.HasIndex("KitId", "ComponentId", "ProductionStationId")
                        .IsUnique();

                    b.ToTable("kit_component", (string)null);
                });

            modelBuilder.Entity("SKD.Model.KitSnapshot", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("BuildCompleted")
                        .HasColumnType("datetime2");

                    b.Property<int>("ChangeStatusCode")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("CustomReceived")
                        .HasColumnType("datetime2");

                    b.Property<string>("DealerCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EngineSerialNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("GateRelease")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("KitId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("KitSnapshotRunId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("KitTimeLineEventTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("OrginalPlanBuild")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("PlanBuild")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("RemovedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("VIN")
                        .HasMaxLength(17)
                        .HasColumnType("nvarchar(17)");

                    b.Property<DateTime?>("VerifyVIN")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Wholesale")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("KitId");

                    b.HasIndex("KitTimeLineEventTypeId");

                    b.HasIndex("KitSnapshotRunId", "KitId")
                        .IsUnique();

                    b.ToTable("kit_snapshot", (string)null);
                });

            modelBuilder.Entity("SKD.Model.KitSnapshotRun", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("PlantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("RemovedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("RunDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Sequence")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PlantId", "RunDate")
                        .IsUnique();

                    b.HasIndex("PlantId", "Sequence")
                        .IsUnique();

                    b.ToTable("kit_snapshot_run", (string)null);
                });

            modelBuilder.Entity("SKD.Model.KitTimelineEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EventDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventNote")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<Guid>("KitId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("KitTimelineEventTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("RemovedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("KitTimelineEventTypeId");

                    b.HasIndex("KitId", "CreatedAt");

                    b.ToTable("kit_timeline_event", (string)null);
                });

            modelBuilder.Entity("SKD.Model.KitTimelineEventType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("RemovedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Sequence")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("kit_timeline_event_type", (string)null);
                });

            modelBuilder.Entity("SKD.Model.KitVin", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("KitId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("KitVinImportId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("RemovedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("VIN")
                        .IsRequired()
                        .HasMaxLength(17)
                        .HasColumnType("nvarchar(17)");

                    b.HasKey("Id");

                    b.HasIndex("KitId");

                    b.HasIndex("KitVinImportId");

                    b.HasIndex("VIN")
                        .IsUnique();

                    b.ToTable("kit_vin", (string)null);
                });

            modelBuilder.Entity("SKD.Model.KitVinImport", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("PartnerPlantCode")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<Guid>("PlantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("RemovedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Sequence")
                        .HasMaxLength(6)
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PlantId", "Sequence")
                        .IsUnique();

                    b.ToTable("kit_vin_import", (string)null);
                });

            modelBuilder.Entity("SKD.Model.Lot", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BomId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LotNo")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<Guid>("ModelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Note")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("PlantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("RemovedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BomId");

                    b.HasIndex("LotNo")
                        .IsUnique()
                        .HasFilter("[LotNo] IS NOT NULL");

                    b.HasIndex("ModelId");

                    b.HasIndex("PlantId");

                    b.ToTable("lot", (string)null);
                });

            modelBuilder.Entity("SKD.Model.LotPart", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("BomQuantity")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("LotId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PartId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("RemovedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ShipmentQuantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PartId");

                    b.HasIndex("LotId", "PartId");

                    b.ToTable("lot_part", (string)null);
                });

            modelBuilder.Entity("SKD.Model.LotPartReceived", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("LotPartId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<DateTime?>("RemovedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("LotPartId");

                    b.ToTable("lot_part_received", (string)null);
                });

            modelBuilder.Entity("SKD.Model.Part", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("OriginalPartNo")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("PartDesc")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PartNo")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<DateTime?>("RemovedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PartDesc");

                    b.HasIndex("PartNo")
                        .IsUnique();

                    b.ToTable("part", (string)null);
                });

            modelBuilder.Entity("SKD.Model.PartnerStatusAck", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Accepted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FileDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("KitSnapshotRunId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("RemovedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("TotalAccepted")
                        .HasColumnType("int");

                    b.Property<int>("TotalProcessed")
                        .HasColumnType("int");

                    b.Property<int>("TotalRejected")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("KitSnapshotRunId")
                        .IsUnique();

                    b.ToTable("partner_status_ack", (string)null);
                });

            modelBuilder.Entity("SKD.Model.Plant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PartnerPlantCode")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("PartnerPlantType")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.Property<DateTime?>("RemovedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasFilter("[Name] IS NOT NULL");

                    b.ToTable("plant", (string)null);
                });

            modelBuilder.Entity("SKD.Model.ProductionStation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("RemovedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Sequence")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("production_station", (string)null);
                });

            modelBuilder.Entity("SKD.Model.Shipment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("PlantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("RemovedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Sequence")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PlantId", "Sequence")
                        .IsUnique();

                    b.ToTable("shipment", (string)null);
                });

            modelBuilder.Entity("SKD.Model.ShipmentInvoice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("InvoiceNo")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<DateTime?>("RemovedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ShipDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ShipmentLotId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceNo")
                        .IsUnique();

                    b.HasIndex("ShipmentLotId");

                    b.ToTable("shipment_invoice", (string)null);
                });

            modelBuilder.Entity("SKD.Model.ShipmentLot", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("LotId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("RemovedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ShipmentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("LotId")
                        .IsUnique();

                    b.HasIndex("ShipmentId");

                    b.ToTable("shipment_lot", (string)null);
                });

            modelBuilder.Entity("SKD.Model.ShipmentPart", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("HandlingUnitId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PartId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<DateTime?>("RemovedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PartId");

                    b.HasIndex("HandlingUnitId", "PartId")
                        .IsUnique()
                        .HasFilter("[HandlingUnitId] IS NOT NULL");

                    b.ToTable("shipment_part", (string)null);
                });

            modelBuilder.Entity("SKD.Model.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(320)
                        .HasColumnType("nvarchar(320)");

                    b.Property<DateTime?>("RemovedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("user", (string)null);
                });

            modelBuilder.Entity("SKD.Model.VehicleModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Body")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(7)
                        .HasColumnType("nvarchar(7)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Model")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ModelYear")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("RemovedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Series")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("vehicle_model", (string)null);
                });

            modelBuilder.Entity("SKD.Model.VehicleModelComponent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ComponentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ProductionStationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("RemovedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("VehicleModelId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ComponentId");

                    b.HasIndex("ProductionStationId");

                    b.HasIndex("VehicleModelId", "ComponentId", "ProductionStationId")
                        .IsUnique();

                    b.ToTable("vehicle_model_component", (string)null);
                });

            modelBuilder.Entity("SKD.Model.Bom", b =>
                {
                    b.HasOne("SKD.Model.Plant", "Plant")
                        .WithMany("Boms")
                        .HasForeignKey("PlantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Plant");
                });

            modelBuilder.Entity("SKD.Model.ComponentSerial", b =>
                {
                    b.HasOne("SKD.Model.KitComponent", "KitComponent")
                        .WithMany("ComponentSerials")
                        .HasForeignKey("KitComponentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("KitComponent");
                });

            modelBuilder.Entity("SKD.Model.DcwsResponse", b =>
                {
                    b.HasOne("SKD.Model.ComponentSerial", "ComponentSerial")
                        .WithMany("DcwsResponses")
                        .HasForeignKey("ComponentSerialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ComponentSerial");
                });

            modelBuilder.Entity("SKD.Model.HandlingUnit", b =>
                {
                    b.HasOne("SKD.Model.ShipmentInvoice", "ShipmentInvoice")
                        .WithMany("HandlingUnits")
                        .HasForeignKey("ShipmentInvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ShipmentInvoice");
                });

            modelBuilder.Entity("SKD.Model.HandlingUnitReceived", b =>
                {
                    b.HasOne("SKD.Model.HandlingUnit", "HandlingUnit")
                        .WithMany("Received")
                        .HasForeignKey("HandlingUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HandlingUnit");
                });

            modelBuilder.Entity("SKD.Model.Kit", b =>
                {
                    b.HasOne("SKD.Model.Dealer", "Dealer")
                        .WithMany("Kits")
                        .HasForeignKey("DealerId");

                    b.HasOne("SKD.Model.Lot", "Lot")
                        .WithMany("Kits")
                        .HasForeignKey("LotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dealer");

                    b.Navigation("Lot");
                });

            modelBuilder.Entity("SKD.Model.KitComponent", b =>
                {
                    b.HasOne("SKD.Model.Component", "Component")
                        .WithMany("KitComponents")
                        .HasForeignKey("ComponentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SKD.Model.Kit", "Kit")
                        .WithMany("KitComponents")
                        .HasForeignKey("KitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SKD.Model.ProductionStation", "ProductionStation")
                        .WithMany("VehicleComponents")
                        .HasForeignKey("ProductionStationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Component");

                    b.Navigation("Kit");

                    b.Navigation("ProductionStation");
                });

            modelBuilder.Entity("SKD.Model.KitSnapshot", b =>
                {
                    b.HasOne("SKD.Model.Kit", "Kit")
                        .WithMany("Snapshots")
                        .HasForeignKey("KitId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SKD.Model.KitSnapshotRun", "KitSnapshotRun")
                        .WithMany("KitSnapshots")
                        .HasForeignKey("KitSnapshotRunId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SKD.Model.KitTimelineEventType", "KitTimeLineEventType")
                        .WithMany("Snapshots")
                        .HasForeignKey("KitTimeLineEventTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Kit");

                    b.Navigation("KitSnapshotRun");

                    b.Navigation("KitTimeLineEventType");
                });

            modelBuilder.Entity("SKD.Model.KitSnapshotRun", b =>
                {
                    b.HasOne("SKD.Model.Plant", "Plant")
                        .WithMany("KitSnapshotRuns")
                        .HasForeignKey("PlantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Plant");
                });

            modelBuilder.Entity("SKD.Model.KitTimelineEvent", b =>
                {
                    b.HasOne("SKD.Model.Kit", "Kit")
                        .WithMany("TimelineEvents")
                        .HasForeignKey("KitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SKD.Model.KitTimelineEventType", "EventType")
                        .WithMany()
                        .HasForeignKey("KitTimelineEventTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EventType");

                    b.Navigation("Kit");
                });

            modelBuilder.Entity("SKD.Model.KitVin", b =>
                {
                    b.HasOne("SKD.Model.Kit", "Kit")
                        .WithMany("KitVins")
                        .HasForeignKey("KitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SKD.Model.KitVinImport", "KitVinImport")
                        .WithMany("KitVins")
                        .HasForeignKey("KitVinImportId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Kit");

                    b.Navigation("KitVinImport");
                });

            modelBuilder.Entity("SKD.Model.KitVinImport", b =>
                {
                    b.HasOne("SKD.Model.Plant", "Plant")
                        .WithMany("KitVinImports")
                        .HasForeignKey("PlantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Plant");
                });

            modelBuilder.Entity("SKD.Model.Lot", b =>
                {
                    b.HasOne("SKD.Model.Bom", "Bom")
                        .WithMany("Lots")
                        .HasForeignKey("BomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SKD.Model.VehicleModel", "Model")
                        .WithMany("Lots")
                        .HasForeignKey("ModelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SKD.Model.Plant", "Plant")
                        .WithMany("Lots")
                        .HasForeignKey("PlantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Bom");

                    b.Navigation("Model");

                    b.Navigation("Plant");
                });

            modelBuilder.Entity("SKD.Model.LotPart", b =>
                {
                    b.HasOne("SKD.Model.Lot", "Lot")
                        .WithMany("LotParts")
                        .HasForeignKey("LotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SKD.Model.Part", "Part")
                        .WithMany("LotParts")
                        .HasForeignKey("PartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lot");

                    b.Navigation("Part");
                });

            modelBuilder.Entity("SKD.Model.LotPartReceived", b =>
                {
                    b.HasOne("SKD.Model.LotPart", "LotPart")
                        .WithMany("Received")
                        .HasForeignKey("LotPartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LotPart");
                });

            modelBuilder.Entity("SKD.Model.PartnerStatusAck", b =>
                {
                    b.HasOne("SKD.Model.KitSnapshotRun", "KitSnapshotRun")
                        .WithOne("PartnerStatusAck")
                        .HasForeignKey("SKD.Model.PartnerStatusAck", "KitSnapshotRunId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("KitSnapshotRun");
                });

            modelBuilder.Entity("SKD.Model.Shipment", b =>
                {
                    b.HasOne("SKD.Model.Plant", "Plant")
                        .WithMany("Shipments")
                        .HasForeignKey("PlantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Plant");
                });

            modelBuilder.Entity("SKD.Model.ShipmentInvoice", b =>
                {
                    b.HasOne("SKD.Model.ShipmentLot", "ShipmentLot")
                        .WithMany("Invoices")
                        .HasForeignKey("ShipmentLotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ShipmentLot");
                });

            modelBuilder.Entity("SKD.Model.ShipmentLot", b =>
                {
                    b.HasOne("SKD.Model.Lot", "Lot")
                        .WithMany("ShipmentLots")
                        .HasForeignKey("LotId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SKD.Model.Shipment", "Shipment")
                        .WithMany("ShipmentLots")
                        .HasForeignKey("ShipmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lot");

                    b.Navigation("Shipment");
                });

            modelBuilder.Entity("SKD.Model.ShipmentPart", b =>
                {
                    b.HasOne("SKD.Model.HandlingUnit", "HandlingUnit")
                        .WithMany("Parts")
                        .HasForeignKey("HandlingUnitId");

                    b.HasOne("SKD.Model.Part", "Part")
                        .WithMany("ShipmentParts")
                        .HasForeignKey("PartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HandlingUnit");

                    b.Navigation("Part");
                });

            modelBuilder.Entity("SKD.Model.VehicleModelComponent", b =>
                {
                    b.HasOne("SKD.Model.Component", "Component")
                        .WithMany("VehicleModelComponents")
                        .HasForeignKey("ComponentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SKD.Model.ProductionStation", "ProductionStation")
                        .WithMany("ModelComponents")
                        .HasForeignKey("ProductionStationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SKD.Model.VehicleModel", "VehicleModel")
                        .WithMany("ModelComponents")
                        .HasForeignKey("VehicleModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Component");

                    b.Navigation("ProductionStation");

                    b.Navigation("VehicleModel");
                });

            modelBuilder.Entity("SKD.Model.Bom", b =>
                {
                    b.Navigation("Lots");
                });

            modelBuilder.Entity("SKD.Model.Component", b =>
                {
                    b.Navigation("KitComponents");

                    b.Navigation("VehicleModelComponents");
                });

            modelBuilder.Entity("SKD.Model.ComponentSerial", b =>
                {
                    b.Navigation("DcwsResponses");
                });

            modelBuilder.Entity("SKD.Model.Dealer", b =>
                {
                    b.Navigation("Kits");
                });

            modelBuilder.Entity("SKD.Model.HandlingUnit", b =>
                {
                    b.Navigation("Parts");

                    b.Navigation("Received");
                });

            modelBuilder.Entity("SKD.Model.Kit", b =>
                {
                    b.Navigation("KitComponents");

                    b.Navigation("KitVins");

                    b.Navigation("Snapshots");

                    b.Navigation("TimelineEvents");
                });

            modelBuilder.Entity("SKD.Model.KitComponent", b =>
                {
                    b.Navigation("ComponentSerials");
                });

            modelBuilder.Entity("SKD.Model.KitSnapshotRun", b =>
                {
                    b.Navigation("KitSnapshots");

                    b.Navigation("PartnerStatusAck");
                });

            modelBuilder.Entity("SKD.Model.KitTimelineEventType", b =>
                {
                    b.Navigation("Snapshots");
                });

            modelBuilder.Entity("SKD.Model.KitVinImport", b =>
                {
                    b.Navigation("KitVins");
                });

            modelBuilder.Entity("SKD.Model.Lot", b =>
                {
                    b.Navigation("Kits");

                    b.Navigation("LotParts");

                    b.Navigation("ShipmentLots");
                });

            modelBuilder.Entity("SKD.Model.LotPart", b =>
                {
                    b.Navigation("Received");
                });

            modelBuilder.Entity("SKD.Model.Part", b =>
                {
                    b.Navigation("LotParts");

                    b.Navigation("ShipmentParts");
                });

            modelBuilder.Entity("SKD.Model.Plant", b =>
                {
                    b.Navigation("Boms");

                    b.Navigation("KitSnapshotRuns");

                    b.Navigation("KitVinImports");

                    b.Navigation("Lots");

                    b.Navigation("Shipments");
                });

            modelBuilder.Entity("SKD.Model.ProductionStation", b =>
                {
                    b.Navigation("ModelComponents");

                    b.Navigation("VehicleComponents");
                });

            modelBuilder.Entity("SKD.Model.Shipment", b =>
                {
                    b.Navigation("ShipmentLots");
                });

            modelBuilder.Entity("SKD.Model.ShipmentInvoice", b =>
                {
                    b.Navigation("HandlingUnits");
                });

            modelBuilder.Entity("SKD.Model.ShipmentLot", b =>
                {
                    b.Navigation("Invoices");
                });

            modelBuilder.Entity("SKD.Model.VehicleModel", b =>
                {
                    b.Navigation("Lots");

                    b.Navigation("ModelComponents");
                });
#pragma warning restore 612, 618
        }
    }
}
